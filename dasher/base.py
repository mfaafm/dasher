from abc import ABC, abstractmethod
from collections import OrderedDict

# from dash.development.base_component import Component


class DasherWidget(ABC):
    def __init__(self, name, x, label=None, dependecy="value"):
        self.name = name
        self.x = x
        self.label = label if label is not None else name
        self.dependency = dependecy

    @property
    @abstractmethod
    def component(self):
        """ Abstract property. The implementation of the getter method in the child
        class must return the concrete component.

        Returns
        -------
        dash.development.base_component.Component
            Generated dash component.
        """
        pass

    @property
    @abstractmethod
    def layout(self):
        """ Abstract property. The implementation of the getter method in the child
        class must return the layout of the concrete component.

        Returns
        -------
        dash.development.base_component.Component
            Generated dash component.
        """
        pass


class DasherWidgetPassthroughMixin(DasherWidget, ABC):
    """ Passthrough mixin for custom dash components. """

    @property
    def component(self):
        if getattr(self.x, "id", None) is None:
            self.x.id = self.name
        else:
            raise ValueError("Component id must be empty.")
        return self.x


class DasherComponent(ABC):
    """ Abstract base class of dasher components.

    Attributes
    ----------
    name: str
        Name of the component.
    x: object of supported type
        Object, which was used to determine which interactive component was generated.
    dependency: str
        Property to use for the input dependency.
    layout
    """

    def __init__(self, name, x, dependency="value"):
        """
        Parameters
        ----------
        name: str
            Name of the component.
        x: object of supported type
            Object used to determine which interactive component is returned.
        dependency: str, optional
            Property to use for the input dependency.
        """
        self.name = name
        self.x = x
        self.dependency = dependency

    @property
    @abstractmethod
    def layout(self):
        """ Abstract property. The implementation of the getter method in the child
        class must return the layout of the concrete component.

        Returns
        -------
        dash.development.base_component.Component
            Generated dash component.
        """
        pass


# class DasherWidget(object):
#     """ A dasher widget contains an interactive dasher component, a label and a layout.
#     The layout combines the label and the interactive component into the final form,
#     which is displayed in the app. The layout is generated by a subclass of
#     ``DasherLayout``.
#
#     Attributes
#     ----------
#     component: DasherComponent
#         An interactive dasher component.
#     label: str
#         A label for the interactive dasher component.
#     layout: dash.development.base_component.Component
#         `layout` is a dash component, which is diplayed in the dasher app.
#     """
#
#     def __init__(self, component, label, layout):
#         """
#         Parameters
#         ----------
#         component: DasherComponent
#             An interactive dasher component.
#         label: str
#             A label for the interactive dasher component.
#         layout: dash.development.base_component.Component
#             `layout` is a dash component, which is diplayed in the dasher app.
#         """
#         self.component = component
#         self.label = label
#         if not isinstance(layout, Component):
#             raise TypeError("widget must be a dash Component")
#         self.layout = layout


class DasherLayout(ABC):
    """ Abtract base class of a dasher layout, which is responsible for creating the
    layout of the dasher app.

    It renders dasher components into dasher widgets, thereby
    combining the interactive component with a label and creating the final layout which
    is displayed in the app (``render_component``).

    It handles the addition of callbacks and creates a suitable form of separation
    between the callbacks in the app layout. The standard way to do this is to generate
    a separate tab for each callback (``add_callback``).

    A child class must implement the abtract methods (``render_component`` and
    ``add_callback``) and create the final app layout as its' ``layout`` attribute.
    If the layout needs external stylesheets, the child class must announce this by
    creating an ``external_stylesheets`` attribute containing the list of required
    external stylesheets.

    Attributes
    ----------
    title: str
        Title of the dash app.
    credits: bool
        If true, dasher / layout credits are shown in the app.
    layout: list of dash.development.base_component.Component
        The final app layout (is assigned to the ``layout`` property of the dash app)
    """

    output_base = "dasher-output"

    def __init__(self, title, widget_spec, credits=True):
        """
        Parameters
        ----------
        title: str
            Title of the dash app.
        credits: bool
            If true, dasher / layout credits are shown in the app.
        """
        if title is None:
            self.title = "Dasher app"
        else:
            self.title = title

        if not isinstance(widget_spec, OrderedDict):
            raise ValueError(
                "widget_spec must be an OrderedDict containing a widget specification."
            )
        self.widget_spec = widget_spec

        self.credits = credits

    @abstractmethod
    def add_callback(self, callback, app, **kwargs):
        """ The implementation must handle the addition of callbacks to the layout and
        provide a suitable form of separation between the callbacks in the app layout.
        The standard way to do this is to generate a separate tab for each callback.

        Parameters
        ----------
        callback: DasherCallback
            The dasher callback to add to the layout.
        app: dash.Dash
            The dash app.
        **kwargs:
           Keyword arguments to override default layout settings for a callback.
        """
        pass


class DasherCallback(object):
    """ This class contains the specification of a dasher callback.

    Attributes
    ----------
    name: str
        Name of the callback.
    description: str or None
        Additional description of the callback.
    f: callable
        The callback function itself.
    kw: dict
        The keyword arguments passed to the ``callback`` decorator.
    labels: list or dict or None
        Labels for the widgets.
    widgets: list of DasherWidget
        Generated dasher widgets for the callback.
    outputs: dash.dependencies.Output or list of dash.dependencies.Output
        Output dependencies for the callback.
    inputs: list of dash.dependencies.Input
        Input dependencies for the callback.
    layout_kw: dict or None
        Keyword arguments to override default layout settings for the callback.
    """

    def __init__(
        self, name, description, f, kw, labels, widgets, outputs, inputs, layout_kw
    ):
        """
        Parameters
        ----------
        name: str
            Name of the callback.
        description: str or None
            Additional description of the callback.
        f: callable
            The callback function itself.
        kw: dict
            The keyword arguments passed to the ``callback`` decorator.
        labels: list or dict or None
            Labels for the widgets.
        widgets: list of DasherWidget
            Generated dasher widgets for the callback.
        outputs: dash.dependencies.Output or list of dash.dependencies.Output
            Output dependencies for the callback
        inputs: list of dash.dependencies.Input
            Input dependencies for the callback
        layout_kw: dict or None
            Keyword arguments to override default layout settings for the callback.
        """
        self.name = name
        self.description = description
        self.f = f
        self.kw = kw
        self.labels = labels
        self.widgets = widgets
        self.outputs = outputs
        self.inputs = inputs
        self.layout_kw = layout_kw
